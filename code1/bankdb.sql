CREATE TABLE USERS (
    U_ID NUMBER(10) PRIMARY KEY,
    FIRSTNAME VARCHAR2(25) NOT NULL,
    LASTNAME VARCHAR2(25) NOT NULL,
    UNAME VARCHAR2(25)  UNIQUE NOT NULL,
    UPASSWORD VARCHAR2(25) NOT NULL
);

CREATE TABLE ACCOUNT_TYPE (
    A_ID NUMBER(10) PRIMARY KEY,
    TYPE VARCHAR2(25) NOT NULL
);

CREATE TABLE USER_ACCOUNTS (
    UA_ID NUMBER(10) PRIMARY KEY,
    U_ID NUMBER(10) NOT NULL,
    AMOUNT NUMBER(9,2) NOT NULL,
    CHECK (AMOUNT >=0),
    CONSTRAINT FK_USER_ACCOUNTS FOREIGN KEY (U_ID)
    REFERENCES USERS(U_ID) ON DELETE CASCADE
);
--------------------------------------------------------------------------
CREATE TABLE USER_ACCOUNT_TYPE (
    UA_ID NUMBER(10),
    A_ID NUMBER(10),
    PRIMARY KEY (UA_ID,A_ID),
    FOREIGN KEY (UA_ID) REFERENCES USER_ACCOUNTS(UA_ID) ON DELETE CASCADE,
    FOREIGN KEY (A_ID) REFERENCES ACCOUNT_TYPE(A_ID)
);
-----------------------------------------------------------------------
CREATE SEQUENCE USERS_SEQ
MINVALUE 1
START WITH 1
INCREMENT BY 1
CACHE 2;
-------------------------------------------------------------------
CREATE SEQUENCE USER_ACCOUNTS_SEQ
MINVALUE 1
START WITH 1
INCREMENT BY 1
CACHE 2;
-----------------------------------------------------------------
CREATE SEQUENCE ACCOUNT_TYPE_SEQ
MINVALUE 1
START WITH 1
INCREMENT BY 1
CACHE 2;
---------------------------------------------------------------
CREATE OR REPLACE TRIGGER USERS_SEQ_TRIGGER
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
    SELECT USERS_SEQ.NEXTVAL INTO :NEW.U_ID FROM DUAL;
END;
/
CREATE OR REPLACE TRIGGER USER_ACCOUNTS_SEQ_TRIGGER
BEFORE INSERT ON USER_ACCOUNTS
FOR EACH ROW
BEGIN
    SELECT USER_ACCOUNTS_SEQ.NEXTVAL INTO :NEW.UA_ID FROM DUAL;
END;
/
CREATE OR REPLACE TRIGGER ACCOUNT_TYPE_SEQ_TRIGGER
BEFORE INSERT ON ACCOUNT_TYPE
FOR EACH ROW
BEGIN
    SELECT ACCOUNT_TYPE_SEQ.NEXTVAL INTO :NEW.A_ID FROM DUAL;
END;
/
--ACCOUNT TYPE INSERTS
insert into ACCOUNT_TYPE (TYPE)
VALUES ('Checking');
insert into ACCOUNT_TYPE (TYPE)
VALUES ('Credit');
insert into ACCOUNT_TYPE (TYPE)
VALUES ('Savings');
--USER INSERTS
INSERT INTO USERS (FIRSTNAME, LASTNAME, UNAME, UPASSWORD)
VALUES ('Dylan','Corbus', 'Dcorbus','password');
INSERT INTO USERS (FIRSTNAME, LASTNAME, UNAME, UPASSWORD)
VALUES ('John','Smith', 'Jsmith','password');
--USER ACCOUNT INSERTS
INSERT INTO USER_ACCOUNTS (U_ID,AMOUNT)
VALUES (1,1000);
INSERT INTO USER_ACCOUNTS (U_ID,AMOUNT)
VALUES (1,500);
INSERT INTO USER_ACCOUNTS (U_ID,AMOUNT)
VALUES (1,500);
INSERT INTO USER_ACCOUNTS (U_ID,AMOUNT)
VALUES (2,600);
INSERT INTO USER_ACCOUNTS (U_ID,AMOUNT)
VALUES (2,500);
--USER ACCOUNT TYPE INSERTS
INSERT INTO USER_ACCOUNT_TYPE (UA_ID,A_ID)
VALUES(1,3);
INSERT INTO USER_ACCOUNT_TYPE (UA_ID,A_ID)
VALUES(2,2);
INSERT INTO USER_ACCOUNT_TYPE (UA_ID,A_ID)
VALUES(3,1);
INSERT INTO USER_ACCOUNT_TYPE (UA_ID,A_ID)
VALUES(4,1);
INSERT INTO USER_ACCOUNT_TYPE (UA_ID,A_ID)
VALUES(5,3);
SELECT USERS.FIRSTNAME || ' ' || USERS.LASTNAME AS NAME, ACCOUNT_TYPE.TYPE, USER_ACCOUNTS.AMOUNT
FROM USERS INNER JOIN
USER_ACCOUNTS ON USERS.U_ID=USER_ACCOUNTS.U_ID INNER JOIN
USER_ACCOUNT_TYPE ON USER_ACCOUNTS.UA_ID=USER_ACCOUNT_TYPE.UA_ID INNER JOIN
ACCOUNT_TYPE ON USER_ACCOUNT_TYPE.A_ID=ACCOUNT_TYPE.A_ID
WHERE USERS.FIRSTNAME =
order by USERS.FIRSTNAME,ACCOUNT_TYPE.TYPE;


CREATE OR REPLACE FUNCTION NEW_ACCOUNT_BALANCE (BALANCE NUMBER, WITHDRAW NUMBER)
RETURN NUMBER IS NEW_BALANCE NUMBER(10);
BEGIN
    NEW_BALANCE := BALANCE - WITHDRAW;
    RETURN NEW_BALANCE;
END;
/

--CREATE OR REPLACE PROCEDURE UPDATE_ACCOUNT_BALANCE(BALANCE NUMBER, WITHDRAW NUMBER)
--IS
--BEGIN
    --UPDATE USER_ACCOUNTS VALUES (1,1,NEW_ACCOUNT_BALANCE(SELECT))
SELECT ACCOUNT_TYPE.TYPE, USER_ACCOUNTS.AMOUNT FROM USERS INNER JOIN USER_ACCOUNTS ON USERS.U_ID=USER_ACCOUNTS.U_ID INNER JOIN USER_ACCOUNT_TYPE ON USER_ACCOUNTS.UA_ID=USER_ACCOUNT_TYPE.UA_ID INNER JOIN ACCOUNT_TYPE ON USER_ACCOUNT_TYPE.A_ID=ACCOUNT_TYPE.A_ID WHERE USERS.FIRSTNAME = 'Dylan';
SELECT ACCOUNT_TYPE.TYPE, USER_ACCOUNTS.AMOUNT FROM USERS INNER JOIN USER_ACCOUNTS ON USERS.U_ID=USER_ACCOUNTS.U_ID INNER JOIN USER_ACCOUNT_TYPE ON USER_ACCOUNTS.UA_ID=USER_ACCOUNT_TYPE.UA_ID INNER JOIN ACCOUNT_TYPE ON USER_ACCOUNT_TYPE.A_ID=ACCOUNT_TYPE.A_ID WHERE UPPER(USERS.UNAME) = 'DCORBUS';
select * from users where uname = ;
    