/* 
Logan Smith's Homework for Week 2
*/



-------2.1 Select
--Task: Select all records from the Employee table
select * from Employee;

--Task: Select all records from the Emplyee table where last name is KIng.
select * from Employee where lastname = 'King';

--Task – Select all records from the Employee table where first name is Andrew and REPORTSTO is NULL.
select * from Employee 
where FirstName = 'Andrew' and REPORTSTO is null;

------2.2 Order By
--Task – Select all albums in Album table and sort result set in descending order by title.
select * from Album
order by title DESC;
--Task – Select first name from Customer and sort result set in ascending order by city
select firstname from Customer
order by firstname asc;

-----2.3 Insert Into
--Task – Insert two new records into Genre table
insert into Genre
(GENREID, NAME)
values (26, 'Indie Pop');

insert into Genre
(GENREID, NAME)
values (27, 'Art Rock');

--Task – Insert two new records into Employee table
insert into employee
(EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL)
values(9, 'Logan', 'Smith', 'Music Tester', 1, '19-JUN-96', '7-AUG-18', '1905 SW 35th ST', 'Redmond', 'OR', 'USA', '97756', '+1 (541) 604-9696', 'Who uses fax?', 'lorgansmith@gmail.com');

insert into employee
(EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL)
values(10, 'Brian', 'Bottini', 'Maid', 1, '18-AUG-95', '7-AUG-18', '8216 NE -35th ST', 'Lalaland', 'CA', 'USA', '64763', '+1 (101) 101-1100', 'Who uses fax?', 'megadoom@gmail.com');

--Task – Insert two new records into Customer table
select * from customer;
insert into customer
(CUSTOMERID, FIRSTNAME, lastname, company, address, country, postalcode, phone, email)
values(60, 'Mario', 'Mario', 'Nintendo', '119 Peaches Castle', 'Mushroom Kingdom', 'World 1', 'BZZT BZZT', 'ogmario@gmail.com');

insert into customer
(CUSTOMERID, FIRSTNAME, lastname, company, address, city, state, country, postalcode, phone, email)
values(61, 'Samus', 'Aran', 'Bounty Hunters United', '000 Space', 'Kuiper Belt', 'SP', 'Federation Against Metroids', '59-99', '(203) 582-8527', 'stunstyle@gmail.com');

------2.4 Update
--Task – Update Aaron Mitchell in Customer table to Robert Walter
update customer
set firstname = 'Robert', lastname = 'Walter'
where firstname = 'Aaron' AND lastname = 'Mitchell';

--Task – Update name of artist in the Artist table “Creedence Clearwater Revival” to “CCR”
update artist
set NAME = 'CCR'
where NAME = 'Creedence Clearwater Revival';

------2.5 Like
--Task – Select all invoices with a billing address like “T%”
select * from invoice
where billingaddress like 'T%';

-----2.6 Between
--Task – Select all invoices that have a total between 15 and 50
select * from invoice
where TOTAL between 15 and 50;

--Task – Select all employees hired between 1st of June 2003 and 1st of March 2004
select * from employee
where HIREDATE between '01-JUN-03' and '01-MAR-04';

-----2.7 Delete
--Task – Delete a record in Customer table where the name is Robert Walter (There may be constraints that rely on this, find out how to resolve them).
--Drops invoice constraint on customerid;
alter table invoice
drop constraint FK_INVOICECUSTOMERID;
--Drops invoiceline constraint on invoiceid;
alter table invoiceline
drop constraint FK_INVOICELINEINVOICEID;
--Add the invoice constraint on customer id, but with 'on delete cascade'
alter table invoice
add constraint fk_invoice_update
foreign key (customerid)
references customer (customerid)
on delete cascade;
--Add the invoiceline constraint on invoice id, but with 'on delete cascade'
alter table invoiceline
add constraint fk_invoiceline_update
foreign key (invoiceid)
references invoice (invoiceid)
on delete cascade;
--Delete the customer safely
delete from customer
where firstname = 'Robert' and lastname = 'Walter';

-----3.1 System Defined Functions
--Task – Create a function that returns the current time

create or replace function newGetTime
return timestamp
is
begin
return systimestamp;
end;
/

select newGetTime as "Date and Time" from dual;

--Task – Create a function that returns the length of a mediatype from the mediatype table
CREATE OR REPLACE FUNCTION getLengthOfMediaType (mti in int)
RETURN number
is ret number;
mediatoreturn varchar2(100);
BEGIN  
    select m.name into mediatoreturn from mediatype m where m.mediatypeid = mti;
    RETURN LENGTH(mediatoreturn);
END;
/

select GETLENGTHOFMEDIATYPE(1) from dual;

-----3.2 System Defined Aggregate Functions
--Task – Create a function that returns the average total of all invoices
CREATE OR REPLACE FUNCTION getAvgInvoiceTotal
RETURN number
is ret number;
BEGIN
    select AVG(ivl.unitprice) into ret
    FROM invoice iv;
    RETURN ret;
END;
/

select getAvgInvoicelinePrice from dual;

--Task – Create a function that returns the most expensive track
CREATE OR REPLACE FUNCTION getTrackCostMax
RETURN number
is ret number;
maxprice number;
BEGIN
    select t.trackid into ret
    FROM track t
    where t.UNITPRICE = (select MAX(track.unitprice) from track)
    and rownum <= 1;
    RETURN ret;
END;
/

select name, unitprice from track where trackid = (getTrackCostMax);

-----3.3 User Defined Functions
--Task – Create a function that returns the average price of invoiceline items in the invoiceline table
CREATE OR REPLACE FUNCTION getAvgInvoicelinePrice
RETURN number
is ret number;
BEGIN  
    select AVG(ivl.unitprice) into ret
    FROM invoiceline ivl;
    RETURN ret;
END;
/

select getAvgInvoicelinePrice from dual;

-----3.4 User Defined Table Functions
--Task – Create a function that returns all employees who are born after 1968.

CREATE OR REPLACE FUNCTION getAgeEmployees
     RETURN SYS_REFCURSOR
  IS
     l_return   SYS_REFCURSOR;
  BEGIN
           OPEN l_return FOR
                SELECT lastname, firstname, birthdate
                  FROM employee
                  where birthdate > '01-Jan-68'
              ORDER BY employeeid;
     RETURN l_return;
END getAgeEmployees;
/

DECLARE
   l_names   SYS_REFCURSOR;
   l_firstname    varchar2(100);
   l_lastname     varchar2(100);
   l_birthdate    date;
BEGIN
   l_names := getAgeEmployees;
   LOOP
      FETCH l_names INTO l_firstname, l_lastname, l_birthdate;
      EXIT WHEN l_names%NOTFOUND;
      DBMS_OUTPUT.put_line(l_firstname || ' ' || l_lastname || ' ' || l_birthdate);
   END LOOP;
   CLOSE l_names;
END;
/

-----4.1 Basic Stored Procedure
--Task – Create a stored procedure that selects the first and last names of all the employees.
create or replace procedure firstAndLastNameSelector (prc out SYS_REFCURSOR)
is
begin
open prc for
select Firstname, Lastname from employee;
end;
/

variable rc refcursor;
exec firstAndLastNameSelector(:rc);
print rc;

declare
tmp_cursor SYS_REFCURSOR;
type tt is table of employee%rowtype;
a2 tt;
begin
tmp_cur

------4.2 Stored Procedure Input Parameters
--Task – Create a stored procedure that updates the personal information of an employee.
create or replace procedure employeeUpdate(
iemployeeid number,
ilastname varchar2, 
ifirstname varchar2, 
ibirthdate date, 
iaddress varchar2, 
icity varchar2, 
istate varchar2, 
ipostalcode varchar2, 
iphone varchar2,
ifax varchar2,
iemail varchar2
)
as
begin
update employee set 
lastname = ilastname,
firstname = ifirstname,
birthdate = ibirthdate,
address = iaddress,
city = icity,
state = istate,
postalcode = ipostalcode,
phone = iphone,
fax = ifax,
email = iemail
where employeeid = iemployeeid;
end;
/

select * from employee;
exec employeeUpdate(2, 'Hello', 'World', '01-JAN-59', 'Lalaland', 'Lalaland', 'LA', 'Lalaland', 'No', '541-222-2323', 'No');
select * from employee;

--Task – Create a stored procedure that returns the managers of an employee.
create or replace procedure getManager (iemployeeid number, prc out sys_refcursor)
as
begin
open prc for 
select firstname, lastname from employee where employeeid = (select reportsto from employee where iemployeeid = employeeid);
end;
/

variable rc refcursor;
exec getManager(7, :rc);
print rc;

-----4.3 Stored Procedure Output Parameters
--Task – Create a stored procedure that returns the name and company of a customer.
create or replace procedure returnNameAndCompany(icustomerid number, prc out sys_refcursor)
as
begin
open prc for 
select firstname, lastname, company from Customer where customerid = icustomerid;
end;
/

variable rc refcursor;
exec returnNameAndCompany(1, :rc);
print rc;

-----5.0 Transactions
--Task – Create a transaction that given a invoiceId will delete that invoice (There may be constraints that rely on this, find out how to resolve them).


--Task – Create a transaction nested within a stored procedure that inserts a new record in the Customer table

-----6.1 Triggers
--Task - Create an after insert trigger on the employee table fired after a new record is inserted into the table.
create or replace trigger employeeInsertTrigger
after insert on employee
begin
update employee
set firstname = 'UPDATED', lastname = 'DATABASE'
where employeeid = 1;
end;
/

select * from employee;

insert into employee
(EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL)
values(13, 'Brian', 'Bottini', 'Maid', 1, '18-AUG-95', '7-AUG-18', '8216 NE -35th ST', 'Lalaland', 'CA', 'USA', '64763', '+1 (101) 101-1100', 'Who uses fax?', 'megadoom@gmail.com');

--Task – Create an after update trigger on the album table that fires after a row is inserted in the table
create or replace trigger albumUpdateTrigger
after update on album
begin
insert into album(Albumid, title, artistid)values(348, 'begin again', 275);
end;
/
select * from album;
update album
set title = 'UPDATED'
where albumid = 2;
select * from album;

--Task – Create an after delete trigger on the customer table that fires after a row is deleted from the table.
create or replace trigger customerDeleteTrigger
after delete on customer
begin
update customer
set firstname = 'UPDATED', lastname = 'DATABASE'
where customerid = 1;
end;
/
select * from customer;
delete from customer
where customerid = 2;
select * from customer;

-----7.1 Inner
--Task – Create an inner join that joins customers and orders and specifies the name of the customer and the invoiceId.
select c.FIRSTNAME, c.lastname, i.invoiceid
from customer c
join invoice i
on c.customerid = i.invoiceid;

-----7.2 Outer
--Task – Create an outer join that joins the customer and invoice table, specifying the CustomerId, firstname, lastname, invoiceId, and total.
select c.customerid, c.FIRSTNAME, c.lastname, i.invoiceid, i.total
from customer c
full join invoice i
on c.customerid = i.invoiceid;

-----7.3 Right
--Task – Create a right join that joins album and artist specifying artist name and title
select ar.name, al.title
from artist ar
right join album al
on al.ALBUMID = ar.ARTISTID;

-----7.4 Cross
--Task – Create a cross join that joins album and artist and sorts by artist name in ascending order.
select * from artist a cross join album al
order by a.NAME ASC;

-----7.5 Self
--Task – Perform a self-join on the employee table, joining on the reportsto column.
select * from employee e1
join employee e2
on e1.reportsto = e2.reportsto;

-----7.6 Complicated Join Statement
--Task: Create an inner join between all tables in the chinook database
select t.name as "Track Name", al.title as "Album Title", ar.name as "Artist Name", plt.playlistid as "PlaylistID", pl.name as "Playlist Name", g.name as "Genre", m.name as "Mediatype", ivl.unitprice as "Unit Price", iv.invoicedate as "Invoice Date", c.lastname as "Customer", em.lastname as "Employee"
from invoiceline ivl
join track t
on ivl.trackid = t.trackid
join album al
on t.albumid = al.albumid
join artist ar
on al.artistid = ar.artistid
join playlisttrack plt
on t.trackid = plt.trackid
join playlist pl
on pl.playlistid = plt.playlistid
join genre g
on t.genreid = g.genreid
join mediatype m
on m.mediatypeid = t.mediatypeid
join invoice iv
on iv.invoiceid = ivl.invoiceid
join customer c
on iv.customerid = c.customerid
join employee em
on em.employeeid = c.customerid;