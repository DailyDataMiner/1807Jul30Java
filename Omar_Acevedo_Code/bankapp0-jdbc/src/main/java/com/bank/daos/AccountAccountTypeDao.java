package com.bank.daos;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import com.bank.pojos.Account;
import com.bank.utils.ConnectionFactory;

public class AccountAccountTypeDao implements Dao<Account, Integer> {

	@Override
	public Account create(Account accountObj) {
		
		try (Connection conn = ConnectionFactory.getInstance().getConnection()) {
			
			// 	Set autocommit to false
			conn.setAutoCommit(false);
			
			
			// 	Insert query
			String insert_statement = "insert into P0_ACCOUNT_ACCOUNTTYPE " +
										"(ACCOUNTID, ACCOUNTTYPESID, BALANCE) " +
										"values " +
										"( ?, ?, ? )";
			
			
			// 	Autogenerated keys to represent from db insert
			String[] autogen_keys = {"ACCOUNT_ACCOUNTTYPEID"};
			
			
			// 	Prepare insert statement
			PreparedStatement ps = conn.prepareStatement(insert_statement, autogen_keys);
			
			
			// 	Prepare insert statement with getter values from Account object, 
			//	as prepared statement parameters
			ps.setInt(1, accountObj.getAccountid());
			ps.setInt(2, accountObj.getAccounttypesid()); // ... P0_ACCOUNTTYPES for name types
			ps.setDouble(3, accountObj.getBalance());
			
			
			//	Execute insert statement and return number of rows added.
			int rowsInserted = ps.executeUpdate();
			
			if (rowsInserted > 0) {
				
				//	Get the results (such as ACCOUNT_ACCOUNTTYPEID pk) from database after insert statement was executed.
				ResultSet rs = ps.getGeneratedKeys();
				
				//	Loop over result(s) from insert.
				while ( rs.next() ) {
					
					//	Set id attribute of Person object
					accountObj.setAccount_accounttypeid(rs.getInt(1));
					
				}
				
				conn.commit();
				
			} // end if
					
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return accountObj;
		
	}

	@Override
	public Account read(Integer id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Account update(Account obj) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void delete(Account obj) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public List<Account> findAll() {
		// TODO Auto-generated method stub
		return null;
	}
	
	public int getAccountTypeId(String accountTypeName) {
		
		int _accountTypeId = 0;
		
		try ( Connection conn = ConnectionFactory.getInstance().getConnection() ) {
			
			String select_query = "select ACCOUNTTYPESID from P0_ACCOUNTTYPES " +
								  "where NAME = ?";
			
			PreparedStatement ps = conn.prepareStatement(select_query);
			ps.setString(1, accountTypeName);
			
			ResultSet rs = ps.executeQuery();
			
			while ( rs.next() ) {
				
				_accountTypeId = rs.getInt(1);
//				_accountTypeId = rs.getInt("ACCOUNTTYPESID");
				
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return _accountTypeId;
	}
	
	
	public String getSuggestedAccType(Account accountObj) {
		
		int accountId 		= accountObj.getAccountid();
		int accountTypeId 	= accountObj.getAccounttypesid();	// checking or savings (id)
		
		int theOtherAccountTypeID;
		String theOtherAccountTypeName = "";
		
		try ( Connection conn = ConnectionFactory.getInstance().getConnection() ) {
			
			String select_query = "select ACCOUNTTYPESID, NAME from P0_ACCOUNTTYPES " +
								  "where ACCOUNTTYPESID <> ?";
			
			
			PreparedStatement ps = conn.prepareStatement(select_query);
			ps.setInt(1, accountTypeId);
			
			ResultSet rs = ps.executeQuery();
			
			rs.next();
			theOtherAccountTypeID = rs.getInt(1);
			theOtherAccountTypeName = rs.getString(2);
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return theOtherAccountTypeName;
		
	}
	
	public double getNewBalance(int accountAccountTypeId) {
		
		double newBalance = 0.0;
		
		try (Connection conn = ConnectionFactory.getInstance().getConnection()) {
			String select_query = "select balance " + 
								  "from p0_account_accounttype " + 
								  "where account_accounttypeid = ?";

			PreparedStatement ps = conn.prepareStatement(select_query);
			ps.setInt(1, accountAccountTypeId);
			ResultSet rs = ps.executeQuery();
			rs.next();
//			print("new balance -> " + rs.getDouble(1));
			newBalance = rs.getDouble(1);
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return newBalance;
	}

}
