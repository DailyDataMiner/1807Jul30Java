package com.bank.daos;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import com.bank.pojos.Person;
import com.bank.utils.ConnectionFactory;


public class PersonDao implements Dao<Person, Integer> {

	@Override
	public Person create(Person personObj) {
		
		try (Connection conn = ConnectionFactory.getInstance().getConnection()) {
			
			// 	Set autocommit to false
			conn.setAutoCommit(false);
			
			
			// 	Insert query
			String insert_statement = "insert into P0_PERSONS " +
					"(FIRSTNAME, LASTNAME, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, USERID) " +
					"values " +
					"( ?, ?, ?, ?, ?, ?, ?, ?, ? )";
			
			
			// 	Autogenerated keys to represent from db insert
			String[] autogen_keys = {"PERSONID"};
			
			
			// 	Prepare insert statement
			PreparedStatement ps = conn.prepareStatement(insert_statement, autogen_keys);
			
			
			// 	Prepare insert statement with getter values from Person object, 
			//	as prepared statement parameters
			ps.setString(1, personObj.getFirstname());
			ps.setString(2, personObj.getLastname());
			ps.setString(3, personObj.getAddress());
			ps.setString(4, personObj.getCity());
			ps.setString(5, personObj.getState());
			ps.setString(6, personObj.getCountry());
			ps.setString(7, personObj.getPostalcode());
			ps.setString(8, personObj.getPhone());
			ps.setInt(9, personObj.getUserid());		// Can this be passed as null... ? Would be fine too
			
			
			//	Execute insert statement and return number of rows added.
			int rowsInserted = ps.executeUpdate();
			
			if (rowsInserted > 0) {
				
				//	Get the results (such as PERSONID pk) from database after insert statement was executed.
				ResultSet rs = ps.getGeneratedKeys();
				
				//	Loop over result(s) from insert.
				while ( rs.next() ) {
					
					//	Set id attribute of Person object
					personObj.setPersonid(rs.getInt(1));
					
				}
				
				conn.commit();
				
			} // end if
					
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return personObj;
	}

	@Override
	public Person read(Integer id) {
		
		Person personObj = null;
		
		try (Connection conn = ConnectionFactory.getInstance().getConnection()) {
			
			conn.setAutoCommit(false);

			//	Create select query
			String select_query = "select PERSONID, FIRSTNAME, LASTNAME, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, USERID " +
									"from P0_PERSONS where PERSONID = ?";
			
			
			//	Prepare select query statement to later pass a parameter for the person id column (pk).
			PreparedStatement ps = conn.prepareStatement(select_query);
			
			
			//	Actually set the value of PERSONID (in this case, position 1) column 
			//  into query parameter designated with.
			ps.setInt(1, id);
			
			
			//	Execute select query with values set earlier before, into db and expect results -> into rs.
			ResultSet rs = ps.executeQuery();
			
			//	Loop over select query results
			while ( rs.next() ) {
				
				personObj = new Person( rs.getInt(1), rs.getString(2), rs.getString(3), 
										rs.getString(4), rs.getString(5), rs.getString(6),
										rs.getString(7), rs.getString(8), rs.getString(8), rs.getInt(9)); // userid (9) null... ? works here?
			
			}	// end while
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		return personObj;
	}

	@Override
	public Person update(Person obj) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void delete(Person obj) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public List<Person> findAll() {
		// TODO Auto-generated method stub
		return null;
	}

	
	
}
