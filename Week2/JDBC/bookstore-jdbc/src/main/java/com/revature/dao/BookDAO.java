package com.revature.dao;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.revature.ConnectionFactory;
import com.revature.pojos.Book;

import oracle.jdbc.OracleTypes;

public class BookDAO implements DAO<Book, Integer>{

	public static void main(String[] args) {
//	List<Book> books = findAll();
//		for(Book b: books) {
//			System.out.println(b);
//		}

	}

	/*CALLABLE STATEMENT
	 * - extends Prepared Statement
	 * - allows us to execute stored procedures
	 * - must REGISTER our IN and OUT parameter values and types
	 * - IN params will be set using setter methods inherited from PreparedStatement
	 * - can return 1 or many ResultSet objects
	 * 
	 * ResultSet
	 * - A table of data representing a DB resultset
	 * 	generated by executing a SQL stmt.
	 * - Maintains a cursor pointing to the current row (however
	 * 	it is initially positioned before the first row). The RS.next() method moves that cursor
	 * 	to each subsequent row until there are no more rows (returns false)
	 */
	public List<Book> findAll() {
		List<Book> books = new ArrayList<Book>();
		try(Connection conn = ConnectionFactory.getInstance().getConnection()) {
			String sql = "{call get_all_books(?)}";
			
			CallableStatement cs = conn.prepareCall(sql);
			cs.registerOutParameter(1, OracleTypes.CURSOR);
			cs.execute();
			
			ResultSet rs = (ResultSet) cs.getObject(1);
			while(rs.next()) {
				Book temp = new Book();
				temp.setBook_id(rs.getInt("Book_ID"));
				temp.setIsbn(rs.getString("ISBN"));
				temp.setTitle(rs.getString("Title"));
				temp.setPrice(rs.getDouble("Price"));
				temp.setGenre_id(rs.getInt("Genre_ID"));
				books.add(temp);
			}
			/*String query = "select * from book";
			
			Statement statement = conn.createStatement();
			ResultSet rs = statement.executeQuery(query);
			
			while(rs.next()) {

				Book temp = new Book();
				temp.setBook_id(rs.getInt(1));
				String temp_isbn = rs.getString(2);
				temp.setIsbn(temp_isbn);
				String temp_title = rs.getString(3);
				temp.setTitle(temp_title);
				temp.setPrice(rs.getDouble(4));
				temp.setGenre_id(rs.getInt(5));
				books.add(temp);
			}*/
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return books;
	}

	@Override
	public Book findOne(Integer id) {
		// TODO Auto-generated method stub
		return null;
	}
	// Book(ID, ISBN, Title, Price, g.getid());
	@Override
	public Book save(Book obj) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Book update(Book obj) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void delete(Book obj) {
		// TODO Auto-generated method stub
		
	}
	
}
