package com.revature.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.revature.ConnectionFactory;
import com.revature.pojos.Genre;

public class GenreDAO implements DAO<Genre, Integer>{

	// TESTING
	public static void main(String[] args) {
		
		  //List<Genre> genres = findAll(); for(Genre g: genres) { System.out.println(g);}
		 
//		System.out.println(findOne(5));
//		
//		Genre temp = new Genre();
//		temp.setName("Classics");
//		save(temp);
	}

	@Override
	public List<Genre> findAll() {
		List<Genre> genres = new ArrayList<Genre>();
		try (Connection conn = ConnectionFactory.getInstance().getConnection()) {
			String query = "select * from genre order by name asc";

			// STATEMENT INTERFACE - allows you to run uncompiled sql code in java
			Statement statement = conn.createStatement();
			ResultSet rs = statement.executeQuery(query); // Returns the number of rows affected by update statement

			while (rs.next()) {
				// Iterates through each row of the result set
				Genre temp = new Genre();
				temp.setId(rs.getInt(1)); // Can access cols of RS by either col name or id
				String name = rs.getString(2);
				temp.setName(name); // 2nd column. Can also use "Name"
				genres.add(temp);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return genres;
	}

	/*
	 * Prepared statement - executes a precompiled SQL statement - efficient for
	 * statements that will execute multiple times
	 */
	public Genre findOne(int id) {
		Genre g = null;
		try (Connection conn = ConnectionFactory.getInstance().getConnection()) {
			String sql = "select * from genre where genre_id = ?";
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.setInt(1, id);
			ResultSet info = ps.executeQuery();
			while (info.next()) {
				g = new Genre();
				g.setId(info.getInt(1));
				g.setName(info.getString(2));
			}
		} catch (SQLException e1) {
			e1.printStackTrace();
		}
		return g;
	}
	/*
	 * Statements
	 * - takes an SQL statement as a string, executes it, 
	 * and returns the result
	 * - allows SQL injection so is bad to use. if you 
	 * MUST, only use it for queries with no variables
	 */
	@Override
	public Genre save(Genre g) {
		try (Connection conn = ConnectionFactory.getInstance().getConnection()) {
			/*
			 * connections automatically commit after tx is complete/ right before
			 * connection closes. set to false to do some sort of validation before
			 * committing
			 */
			conn.setAutoCommit(false);

			String sql = "insert into genre(name) values(?)";

			// code to get back autogenerated primary key
			// other keys can be autogenerated too
			String[] keys = { "Genre_ID" };
			PreparedStatement ps = conn.prepareStatement(sql, keys);
			ps.setString(1, g.getName());

			// Update return num rows added/updated/deleted. Queries return result sets
			int numRowsAffected = ps.executeUpdate();
			if (numRowsAffected > 0) {
				// allows us to grab the columns generated by the database.
				ResultSet pk = ps.getGeneratedKeys();
				while (pk.next()) {
					System.out.println(pk.toString());
					g.setId(pk.getInt(1));
				}
			}
			conn.commit();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return g;
	}

	@Override
	public Genre findOne(Integer id) {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	public Genre update(Genre obj) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void delete(Genre obj) {
		// TODO Auto-generated method stub
		
	}
}
