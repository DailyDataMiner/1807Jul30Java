package com.ex.dao;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.ex.pojos.Book;
import com.ex.util.ConnectionFactory;

import oracle.jdbc.OracleTypes;

public class bookDAO implements DAO<Book, Integer> {
	
//	public static void main(String[] args) {
//		Book book = new Book("0261102350", "cook book for crooks", 28.09, 23);
//		save(book);
		
//		System.out.println(findAll());
		
//		Book book = findOne("'The Two Towers'");
//		System.out.println(book);
//		
//		List<Book> books = findAllBooks();
//		for(Book b : books) {
//			System.out.println(b);
//		}
//	}
	
	// unsafe, sql injection
	public static List<Book> findAllBooks() {
		List<Book> books = new ArrayList<Book>();
		try(Connection conn = ConnectionFactory.getInstance().getConnection()) {
			String query = "select * from book";
			
			//Statement interface
			Statement statement = conn.createStatement();
			ResultSet rs = statement.executeQuery(query);
			
			while(rs.next()) {
				// iterate through the result set
				Book temp = new Book();
				temp.setId(rs.getInt(1));
				temp.setIsbn(rs.getString(2));
				temp.setTitle(rs.getString(3));
				temp.setPrice(rs.getDouble(4));
				books.add(temp);
				
			}
		} catch(SQLException e) {
			e.printStackTrace();
		}
		
		return books;
	}
	
	public Book findOne(String name) {
		Book temp = null;
		try(Connection conn = ConnectionFactory.getInstance().getConnection()) {
			String query = "select * from book where title = " + name;
			
			//Statement interface
			Statement statement = conn.createStatement();
			ResultSet rs = statement.executeQuery(query);
			
			while(rs.next()) {
				// iterate through the result set
				temp = new Book();
				temp.setId(rs.getInt(1));
				temp.setIsbn(rs.getString(2));
				temp.setTitle(rs.getString(3));
				temp.setPrice(rs.getDouble(4));				
			}
		} catch(SQLException e) {
			e.printStackTrace();
		}
		
		return temp;
	}
	
	@Override
	public Book save(Book b) {
		try(Connection conn = ConnectionFactory.getInstance().getConnection()) {
			// connections auto commit after tx is complete
			// set false to do validations
			conn.setAutoCommit(false);
			String sql = "insert into book(isbn, title, price, genre_id) values(?, ?, ?, ?)";
			// code go get back auto generated PK
			// can also retrieve other auto generated keys(date stamps etc)
			String[] keys = {"Book_ID"};
			PreparedStatement ps = conn.prepareStatement(sql, keys);
			ps.setString(1,  b.getIsbn());
			ps.setString(2, b.getTitle());
			ps.setDouble(3, b.getPrice());
			ps.setInt(4, b.getGenreId());
			// update returns number of rows updated
			// queries return result sets
			int rowsUpdated = ps.executeUpdate();
			if(rowsUpdated > 0) {
				ResultSet pk = ps.getGeneratedKeys();
				while(pk.next()) {
					b.setId(pk.getInt(1));
				}
			}
			
			conn.commit();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return b;
	}

	@Override
	public List<Book> getAll() {
		/*
		 * Callable statement
		 * - extends preparedstatement
		 * - allows execution of stored procedures
		 * - must register IN and OUT params and values
		 * - IN params will be set using setter inherited from PreparedStatement
		 * - can return 1 or many ResultSet objects
		 * 
		 * ResultSet
		 * - table of data representing DB results generated by executing SQL statement
		 * - maintains a cursor pointing to the current row(however, it's initially positioned before first row)
		 * - RS.next() method moves cursor to each subsequent row until no more
		 */
		
		List<Book> books = new ArrayList<>();
		try(Connection conn = ConnectionFactory.getInstance().getConnection()) {
			String sql = "{call get_all_book(?)}";
			CallableStatement cs = conn.prepareCall(sql);
			// 1 param
			cs.registerOutParameter(1, OracleTypes.CURSOR);
			cs.execute();
			ResultSet rs = (ResultSet) cs.getObject(1);
			
			while(rs.next()) {
				Book temp = new Book(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getDouble(4), rs.getInt(5));
				System.out.println(temp);
				books.add(temp);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return books;
	}

	@Override
	public Book findOne(Integer id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Book update(Book obj) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void delete(Book obj) {
		// TODO Auto-generated method stub
		
	}
}
